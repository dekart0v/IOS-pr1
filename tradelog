#!/bin/bash
export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8

print_help() {
	echo "*******************************"
	echo "VUT FIT 2021/2022 letni semestr"
	echo "1. projekt IOS"
	echo "xiuden00, Iudenkov Ilia"
	echo "*******************************"
	echo "Script to analyze logs of stock-market application."
	echo ""
	echo "Usage:	tradelog [FILTER] [COMMAND] [LOG1 [LOG2 [...]]]"
	echo ""
	echo "	tradelog [-h|--help] for more information"
	echo ""
	echo "Available commands:"
	echo "list-tick	- Display only tickers from log."
	echo "profit 		- Display profit from closed positions."
	echo "pos 		- Values of held positions (descending by value). "
	echo "last-price	- Last known price for each ticker."
	echo "hist-ord	- Statement of histogram of the number of transactions according to the ticker."
	echo "graph-pos	- Statement of graph of values of held positions according to the ticker."
	echo ""
	echo "Available filters:"
	echo "-a DATETIME-after 	- Display only logs AFTER this time."
	echo "-b DATETIME-before 	- Display only logs BEFORE this time."
	echo "-t TICKER 		- Display only this ticker."
	echo "-w WIDTH 		- Graph settings (width)." 
}

list_tick() {
	IFS=$'\n'
	awk -F';' '{print $2}' $file | sort | uniq
}

profit() { # (need -t support)
  if [[ "$1" == "-t" ]]
  then
    buy=$(awk /"$2"/ $file | awk -F';' '{printf "%s;%.2f\n",$3, $6*$4}' | awk /buy/ | awk -F';' '{printf "-%.2f\n", $2}' | paste -sd+ | bc)
    sell=$(awk /"$2"/ $file | awk -F';' '{printf "%s;%.2f\n",$3, $6*$4}' | awk /sell/ | awk -F';' '{printf "%.2f\n", $2}' | paste -sd+ | bc)
    echo "$sell $buy" | paste -sd+ | bc
  else
    buy=$(awk -F'\n' '{print $1}' $file | awk -F';' '{printf "%s;%.2f\n",$3, $6*$4}' | awk /buy/ | awk -F';' '{printf "-%.2f\n", $2}' | paste -sd+ | bc)
    sell=$(awk -F'\n' '{print $1}' $file | awk -F';' '{printf "%s;%.2f\n",$3, $6*$4}' | awk /sell/ | awk -F';' '{printf "%.2f\n", $2}' | paste -sd+ | bc)
    echo "$sell $buy" | paste -sd+ | bc
  fi
}

pos() {
	echo "Pos func"
}

last_price() {
  sort -r $file | awk -F';' '{printf "%-10s:%8s\n", $2, $4}' | sort -u -k 1,1 | uniq
}

hist_ord() {
	echo "Hist Ord Func"
}

graph_pos() {
	echo "Graph pos func"
}

file="${*: -1}" #file = last arg (probably need to use @ instead if *)
if [[ $file !=  *.log* ]]; then # if <filename> is not ended with .log, then error appears
	echo "Wrong filename."
fi

while [ "$#" -gt 0 ]; do
	case "$1" in
	-h)
		print_help
		exit 0
		;;
	--help)
		print_help
		exit 0
		;;
	-w) #TODO
		width="$2"
		echo "Width is $width"
		shift 2
		;;
	-a)
		awk -F ';' -v dateA="$2" '{if (FNR>1 && dateA<$1) {print}}' "$file"
		shift 2
		;;
	-b)
	  awk -F ';' -v dateA="$2" '{if (FNR>=1 && dateA>$1) {print}}' "$file"
		shift 2
		;;
	-t) #REPAIR
		IFS=$'\n'
		for line in $file
		do
		    if [[ "$3" == "profit" ]] # $1=-t $2=TSLA $3=profit
		    then
          profit "$@" #filtered profit
          shift 3
        else
          grep -w $2 $file #| sort -k 1M
          shift 2
        fi
		done
		;;
	list-tick)
		list_tick
		shift
		;;
	profit) # unfiltered profit
	  profit "$@"
		shift
		;;
	pos) #TODO
		pos
		shift
		;;
	last-price)
		last_price
		shift
		;;
	hist-ord) #TODO
		hist_ord
		shift
		;;
	graph-pos) #TODO
		graph_pos
		shift
		;;
	*.log) # if filename is misspelled, "no such func" won't be printed
		shift
		;;
	*log.g*) #TODO
	  echo "Not working with archives yet"
		shift
		;;
	*) #TODO
	  echo "'$*' no such function"
		shift
		;;
	esac
done